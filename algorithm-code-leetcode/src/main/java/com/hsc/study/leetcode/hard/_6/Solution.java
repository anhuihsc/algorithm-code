package com.hsc.study.leetcode.hard._6;

import java.util.HashMap;
import java.util.Stack;

/**
 * 给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。
 * <p>
 * 示例 1:
 * <p>
 * 输入: "(())" 输出: 2 解释: 最长有效括号子串为 "()" 示例 2:
 * <p>
 * 输入: ")()())" 输出: 4 解释: 最长有效括号子串为 "()()"
 * <p>
 * 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-valid-parentheses 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 *
 *  首先使用 暴力解法 容易超时
 *  动态规划 定义dp[n]
 */
public class Solution {
    public int longestValidParentheses(String s) {
        int maxlen = 0;
        for (int i = 0; i < s.length(); i++) {
            for (int j = i + 2; j <= s.length(); j+=2) {
               String tmp= s.substring(i, j);
                if (tmp.length()>maxlen && isValid(tmp)) {
                    maxlen = Math.max(maxlen, j - i);
                }
            }
        }
        return maxlen;
    }
    //
    //private int dp(String s) {
    //    int[] dp = new int[s.length()];
    //
    //
    //}

    private boolean isValid(String s) {
        Stack<Character> stack = new Stack<Character>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // is a closing bracket
            if (c == ')') {
                // get stack top element
                char topElement = stack.empty() ? '#' : stack.pop();
                if (topElement != '(') {
                    return false;
                }
            } else {
                stack.push(c);
            }
        }
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        long time=System.currentTimeMillis();
        System.out.println(new Solution().longestValidParentheses("(()(()))())))())))(((()(())))(()())((())((()()()(())))))()(())))())))(())())())((())))((((()))((())()))()(()()(())))())())))()))(()()((()(())()))((())(((()()()(((())((()()((())()))(()(())))()()))(()()))))))))((()())((((())(())())((())((()))))((()()(())()))()())((()((()))(()((())()()))((()()(()(()((())))()((())((()))()(()))())(()()())())()())(()()))))((()())(())()((()))(()(((())()(())))(())())))()))())))()()((()(((()(())(())))((()))())())())))))))((()(((())(())))(((())(()((()))))))())())()((()()((()()(())((()(((()((()())(()())()()()))()(()(()(()(((((()()))(((()))(()((()((((((()())(()))())((()))())()())()((()))())))()(()(()()))()((())())((()((())(()((())((()))))((((((((())()())))()))())((())())())()()())))))(()))()())(())(((((())((()))((()()())()))))(())))))(()(((((((())((()((()))((())((((())))))))))()))))))(()(())))))((()))(()))(()))((()((())((()(()((()(())(()()())())()))()())()(()))))(()())()()))(()())))(()))))((()()))(()()()())))))(())()()(((()()()()((())(()()())(((()(()((((()(())())))()(((()(()())))())())(()))()))())())(()()()()()())())(())((((())((((((((((()())()))())))())()))))))()(()((((((()))))))()())((()())())(()())()()()))(())()(()(()()))()))(((()(((())())()((())()))(()()((((())()))))(()(((())((())(())())()))((())(())())()(()()(())()())(()()))())()))()())()((()(((()((()()(()())))))()(()((((((((()())))(()(()))((((()()))))))))((()()(()(())(()())(((()))(())))))())(((((()((())())()())()()())()())()())))((()(()()))(((()()((())())((()(()(()())(((((()()(())))))())(())(())(()(()))(())()()))(()))(())()())((((())()())())))))()(())))()(())(())))((()()()((())()(())(()((((()))())())()(()()())()())()(()(()(()))(()(()()((())(()())))(((()(())()())(())()))(())()))())())((((()()(()))())))))))(((()))(()(()()))))))))((()))(()((()))(((((()()()))((((()()(()())((()(())))())(((()(()()))(((())()))(("));
        System.out.println(System.currentTimeMillis()-time);
    }

}
